## policy.conf.divert.sample
##
## This sample file highlights some of the use cases in deploying with divert.
## 
## For more information about the format of the policy.conf file and the various
## conditions and actions that are supported by the PTS, use "man policy.conf"
## or refer to the PTS SandScript Configuration Guide.
##
## Do not edit this file.  Copy lines from this file into policy.conf and 
## edit policy.conf or into Control Center.
##
## These examples assume that there are two network classes defined in
## subnets.txt named "internal" and "external".
##
## Example 1: Diverting all HTTP and bittorrent traffic to a group of 3 cache servers 
##            in full divert configuration.  Each of these cache servers
##            are both IPv4 and IPv6 capable.  In addition, the cache servers
##            will not modify the initial packets of a flow.  
##            There will be ping healthcheck monitoring the health of each 
##            destination.  Furthermore, the destination will have ramp up 
##            time of 1 minutes with 10 iterations
## 
## Step 1. define the destinations.  Note that each destination has MTU of 1500
##
#destination "cache_server1" divert ip 192.0.2.0 \
#                              mtu 1500 \
#                              reset_server false \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 true 
#
#destination "cache_server2" divert ip 192.0.2.1 \
#                              mtu 1500 \
#                              reset_server false \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 true 
#
#destination "cache_server3" divert ip 192.0.2.2 \
#                              mtu 1500 \
#                              reset_server false \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 true 
##
## Step 2: define healthcheck.  The ping healthcheck will ping every 10 
##         seconds with timeout of 800ms.
##
#healthcheck "ping_check" ping \
#             interval 10 seconds \
#             timeout 800 ms
#
## Step 3: define destination group.  If the connection to one of the cache server is down, new
##         flows will be diverted to the remaining cache servers.
#
#destination "cache_group" group destinations "cache_server1" \
#                                             "cache_server2" \
#                                             "cache_server3" \
#                                 healthchecks "ping_check" \
#                                 ramp_interval 1 minutes \
#                                 ramp_iterations 10
#                                 
#
## Step 4: Define the condition for diverting all HTTP or bittorrent traffic from subscriber.
##         In this example, only traffic where the subscriber initiates the connection is diverted
#
#PolicyGroup expr(Flow.Client.PortRole = PortRole.Subscriber) \
#{
#   if expr(Flow.SessionProtocol = Protocol.Http or \
#           Flow.ApplicationProtocol = Protocol.bittorrent) then \
#              divert destination "cache_group"
#}

## Step 5: You may want to provide measurements on the bandwidth on the subscriber side vs. 
##         the internet side that matches divert condition
#MeasurementGroup expr(Flow.Client.PortRole = PortRole.Subscriber and \
#                 (Flow.SessionProtocol = Protocol.Http or \
#                  Flow.ApplicationProtocol = Protocol.bittorrent)) all { \
#                  
#measurement "BytesFromSubscriber" sum(Flow.Subscriber.Tx.ProtocolBytes) \
#            over publish_interval
#
#measurement "BytesToSubscriber" sum(Flow.Subscriber.Rx.ProtocolBytes) \
#            over publish_interval
#
#measurement "BytesFromInternet" sum(Flow.Internet.Tx.ProtocolBytes) \
#            over publish_interval
#
#measurement "BytesToInternet" sum(Flow.Internet.Rx.ProtocolBytes) \
#            over publish_interval
#
#}                                   
#
## Example 2: Diverting all flash video to a group of video optimizer in 
#             half divert configuration that uses HTTP healthcheck and ping healthcheck.
##
## Step 1: define destination.  Note that in this exmple, the mtu is 1520
#destination "video_optimizer1" divert ip 192.0.2.10 \
#                              mtu 1520 \
#                              reset_server true \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 true 
#
#destination "video_optimizer2" divert ip 192.0.2.11 \
#                              mtu 1520 \
#                              reset_server true \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 true 
#
#destination "video_optimizer3" divert ip 192.0.2.12 \
#                              mtu 1520 \
#                              reset_server true \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 true 
#
## Step 2: define healthcheck.  The ping healthcheck will ping every 10 
##         seconds with timeout of 800ms.  The HTTP healthcheck will
##         send a HEAD request to /index.html every 10 seconds and PTS expects response
##         to begin with HTTP/1.1 202.  Furthermore, when the healthcheck is up, PTS will retry
##         1 times after the intial faiure before the host is marked down.  When the healthcheck
##         is down, PTS will retry 4 times before the host is marked up. 
##
#healthcheck "ping_check_for_vo" ping \
#             interval 10 seconds \
#             timeout 800 ms
#             
#healthcheck "HTTP_check_1" http \
#             interval 10 seconds \
#             timeout 800 ms \
#             path "/index.html" \
#             http_version "1.1" \
#             retry 1 \
#             retry_failure 4 \
#             response_regex "\AHTTP/1.1 202"
#
## Step 3: Define group destinations.  Note that for this example, there are only 5 iterations 
##         in ramping up before a full load of traffic is diverted to a newly up destinatino.  
##         Each ramp interval has a duration of 2 minutes.  
#destination "video_optimizer_group" group destinations \
#                                    "video_optimizer1" \
#                                    "video_optimizer2" \
#                                    "video_optimizer3" \
#                                    healthchecks "ping_check_for_vo" \
#                                                  "HTTP_check_1" \
#                                    ramp_interval 2 minutes \
#                                    ramp_iterations 5
#
## Step 4: Define policy to divert all flash video.  
#PolicyGroup expr(Flow.Client.PortRole = PortRole.Subscriber) \
#{
#    if expr(Flow.ApplicationProtocol = Protocol.flashvideo) then divert destination "video_optimizer_group"
#} 
#
#
## Example 3: Diverting all HTTP traffic to a sequence of divert hosts 
##            that consists video optimizer and cache server.
##            The video optimizer is only IPv4 capable and the cache is both IPv4 and IPv6 capable.
##            Therefore, the chain is only IPv4 capable.
## Step 1: define destination
#destination "video_optimizer1" divert ip 192.0.2.20 \
#                              mtu 1500 \
#                              reset_server false \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 false
#
#destination "video_optimizer2" divert ip 192.0.2.21 \
#                              mtu 1500 \
#                              reset_server false \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 false
#
#destination "cache_server1" divert ip 192.0.2.22 \
#                              mtu 1500 \
#                              reset_server false \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 true 
#
#destination "cache_server2" divert ip 192.0.2.23 \
#                              mtu 1500 \
#                              reset_server false \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 true 

## Step 2: define healthcheck.  We will have inline healthcheck that 
##         sends healthcheck from both direction every 5 seconds and timeout is
##         1 second.  In addition, there are ping healthchecks on each destination.
#healthcheck "Ping_seq" ping interval 5seconds timeout 1 seconds retry 2 retry_failure 2
#healthcheck "Inline_seq" inline interval 5seconds timeout 1 seconds retry 2 retry_failure 2

## Step 3: define divert sequence.  There are 4 sequences.  
#destination "service_chain1" divert_sequence \
#                             tcp_syn true \
#                             reset_server false \
#                             destinations "video_optimizer1" "cache_server1" \
#                             mtu 1500 \
#                             interface "fromClient" vlan 2500 \
#                             interface "fromServer" vlan 2600 \
#                             
#destination "service_chain2" divert_sequence \
#                             tcp_syn true \
#                             reset_server false \
#                             destinations "video_optimizer1" "cache_server2" \
#                             mtu 1500 \
#                             interface "fromClient" vlan 2501 \
#                             interface "fromServer" vlan 2601 \
#                             
#destination "service_chain3" divert_sequence \
#                             tcp_syn true \
#                             reset_server false \
#                             destinations "video_optimizer2" "cache_server1" \
#                             mtu 1500 \
#                             interface "fromClient" vlan 2502 \
#                             interface "fromServer" vlan 2602 \
#                             
#destination "service_chain4" divert_sequence \
#                             tcp_syn true \
#                             reset_server false \
#                             destinations "video_optimizer2" "cache_server2" \
#                             mtu 1500 \
#                             interface "fromClient" vlan 2503 \
#                             interface "fromServer" vlan 2603 \
#
### Step 4: define destination group
#destination "service_chain_group" group destinations "service_chain1" \
#                                                     "service_chain2" \
#                                                     "service_chain3" \
#                                                     "service_chain4" \
#                                  healthchecks "Ping_seq" \
#                                               "Inline_seq" \
#                                  ramp_interval 1 minutes \
#                                  ramp_iterations 10 
#                                  
## Step 5: define divert condition
#PolicyGroup expr(Flow.Client.PortRole = PortRole.Subscriber) \
#{
#   if expr(Flow.SessionProtocol = Protocol.Http) then divert destination "service_chain_group" \
#                from client interface "fromClient" \
#                from server interface "fromServer" 
#}
#                                  
## Example 4: Diverting all HTTP traffic to a sequence of divert hosts 
##            that consists video optimizer and cache server.
##            The cache server is a half divert host.  Thus, the chain is configured as half divert
##            The video optimizer is only IPv4 capable and the cache is both IPv4 and IPv6 capable.
##            Therefore, the chain is only IPv4 capable.
## Step 1: define destination
#destination "video_optimizer1" divert ip 192.0.2.20 \
#                              mtu 1500 \
#                              reset_server false \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 false
#
#destination "video_optimizer2" divert ip 192.0.2.21 \
#                              mtu 1500 \
#                              reset_server false \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 false
#
#destination "cache_server1" divert ip 192.0.2.22 \
#                              mtu 1500 \
#                              reset_server true \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 true 
#
#destination "cache_server2" divert ip 192.0.2.23 \
#                              mtu 1500 \
#                              reset_server true \
#                              tcp_syn true \
#                              replay_safe true \
#                              ipv4 true \
#                              ipv6 true 
#
## Step 2: define healthcheck.  There are ping healthchecks on each destination.
#healthcheck "Ping_seq" ping interval 5seconds timeout 1 seconds retry 2 retry_failure 2
#
## Step 3: define divert sequence.  There are 4 sequences.  
#destination "service_chain1" divert_sequence \
#                             tcp_syn true \
#                             reset_server true \
#                             destinations "video_optimizer1" "cache_server1" \
#                             mtu 1500 \
#                             vlan 2600 
#                             
#destination "service_chain2" divert_sequence \
#                             tcp_syn true \
#                             reset_server true \
#                             destinations "video_optimizer1" "cache_server2" \
#                             mtu 1500 \
#                             vlan 2601 
#                             
#destination "service_chain3" divert_sequence \
#                             tcp_syn true \
#                             reset_server true \
#                             destinations "video_optimizer2" "cache_server1" \
#                             mtu 1500 \
#                             vlan 2602 
#                             
#destination "service_chain4" divert_sequence \
#                             tcp_syn true \
#                             reset_server true \
#                             destinations "video_optimizer2" "cache_server2" \
#                             mtu 1500 \
#                             vlan 2603 
#
### Step 4: define destination group
#destination "service_chain_group" group destinations "service_chain1" \
#                                                     "service_chain2" \
#                                                     "service_chain3" \
#                                                     "service_chain4" \
#                                  healthchecks "Ping_seq" \
#                                  ramp_interval 1 minutes \
#                                  ramp_iterations 10 
#                                  
## Step 5: define divert condition
#PolicyGroup expr(Flow.Client.PortRole = PortRole.Subscriber) \
#{
#   if expr(Flow.SessionProtocol = Protocol.Http) then divert destination "service_chain_group" 
#}